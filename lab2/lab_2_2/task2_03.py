# 3) Декоратор вызовов

# Напишите декоратор log_calls, который записывает в файл время вызова, имя
# и аргументы вызванной функции. Один вызов функции - одна строка в файле.
# Декоратор должен принимать имя файла для записи в качестве параметра.

# нужен для записи времени вызова
import time

def log_calls(filename): # принимает аргумент (имя файла для логирования) и возвращает сам декоратор.
    def decorator(func): # принимает функцию func, которую нужно обернуть. будет вызываться при применении @log_calls(...).
#                                     ╭─ функция, которая принимает любой набор аргументов (25 пункт в файле лаб2_ф-ии_рекурсия_декораторы)
        def zapis(*args, **kwargs):# ─┼─ перехватывает вызов оригинальной функции, записывает информацию
#                                     ╰─ вызывает оригинальную функцию с теми же аргументами
#
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S') # ─┬─ получает текущее время в формате 2025-09-28 18:00:00
#                                                             ╰─ strftime — форматирует время, %Y-%m-%d %H:%M:%S — год, месяц, день, часы, минуты, секунды
            log_line = f"{timestamp} | {func.__name__} | args={args} kwargs={kwargs}\n" # строка для записи в лог
            with open(filename, "a", encoding="utf-8") as f: # ─┬─ открывает файл filename (например, "calls.log") в режиме добавления ("a"):
#                                                               ├─ сли файл не существует — создаёт, иначе добавляет строку в конец
#                                                               ╰─ encoding="utf-8" — поддержка кириллицы и спецсимволов (на всякий)
                f.write(log_line)  # Записывает строку в файл.
            return func(*args, **kwargs) # возвращает функцтю с аргументами и возвращает результат
        return zapis # заменяет оригинальную функцию
    return decorator # возвращает декоратор — теперь @log_calls(...) будет работать.

@log_calls("calls.log")     #─┬─ применяет декоратор к функции ниже
def greet(name):            #─┼─ = 'greet = log_calls("calls.log")(greet)'
    print(f"Привет, {name}")#─╯

@log_calls("calls.log")
def add(a, b):
    return a + b

greet("Макс")
add(1, 2)

# для себя
# https://ravesli.com/module-time-python/?ysclid=mg3vyqdlor604663964 - про время
# https://labex.io/tutorials/python-how-to-log-function-calls-with-decorators-438196